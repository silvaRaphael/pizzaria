{{#> wrapper menu=menu }}
  <div class="col-lg-12">

    <div class="card">
      <div class="card-header d-flex justify-content-between">
        <h5 class="card-title">{{title}}</h5>
        <a class="btn btn-primary h-min" onclick="modalAdd.show()">Novo Pedido</a>
      </div>
      <div class="card-body">
        <div class="py-3">
          <table id="client-order-table" class="table dt-responsive nowrap align-middle" style="width:100%">
            <thead>
              <tr>
                <th scope="col">#</th>
                <th scope="col">Status</th>
                <th scope="col">Preço</th>
                <th scope="col">Quantidade</th>
                <th scope="col">Pedido</th>
                <th scope="col">Data</th>
                <th scope="col"><i class="bi bi-tools"></i></th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>

  </div>

{{/wrapper}}

{{#> simple-modal id="modalAdd" title="Novo Pedido" onSave="createPizzaOrder(this)"}}
  <div id="pizza-orders-list" class="col-12">
  </div>
  <div class="col-6 form-group mb-2">
    <label>Sabores</label>
    <select class="form-select" name="pizzaFlavorsIds" onchange="calculateOrderPrice(this, 'pizzaFlavorsIds', '#modalAdd')" multiple required>
      <option value="">Selecione</option>
      {{#each pizzaFlavors}}
        <option value="{{id}}" data-price="{{price}}">{{flavor}}</option>
      {{/each}}
    </select>
  </div>
  <div class="col-6 form-group mb-2">
    <label>Coberturas</label>
    <select class="form-select" name="pizzaToppingsIds" onchange="calculateOrderPrice(this, 'pizzaToppingsIds', '#modalAdd')" multiple>
      <option value="">Selecione</option>
      {{#each pizzaToppings}}
        <option value="{{id}}" data-price="{{price}}">{{topping}}</option>
      {{/each}}
    </select>
  </div>
  <div class="col-4 form-group mb-2">
    <label>Tamanho</label>
    <select class="form-select" name="size" onchange="calculateSizePrice(this, '#modalAdd')" required>
      {{#each pizzaSizes}}
        <option value="{{id}}" data-price="{{price}}">{{size}}</option>
      {{/each}}
    </select>
  </div>
  <div class="col-4 form-group mb-2">
    <label>Quantidade</label>
    <div class="input-group">
      <button class="btn btn-light" onclick="setAmmount('#modalAdd', '-1')"><i class="bx bx-minus"></i></button>
      <input type="text" class="form-control text-center" name="ammount" value="1" onchange="setAmmount('#modalAdd')" required>
      <button class="btn btn-light" onclick="setAmmount('#modalAdd', '+1')"><i class="bx bx-plus"></i></button>
    </div>
  </div>
  <div class="col-4 form-group mb-2">
    <label>Preço</label>
    <input type="text" class="form-control" name="price" data-size="{{getProperty (getArray pizzaSizes 0) 'price'}}" value="{{getProperty (getArray pizzaSizes 0) 'priceLabel'}}" required disabled>
  </div>
{{/simple-modal}}

{{#> simple-modal id="modalEdit" title="Editar Pedido" onSave="updateOrder(this)"}}
  <div class="col-6 form-group mb-2">
    <label>Sabores</label>
    <select class="form-select" name="pizzaFlavorsIds" onchange="calculateOrderPrice(this, 'pizzaFlavorsIds', '#modalEdit')" multiple required>
      <option value="">Selecione</option>
      {{#each pizzaFlavors}}
        <option value="{{id}}" data-price="{{price}}">{{flavor}}</option>
      {{/each}}
    </select>
  </div>
  <div class="col-6 form-group mb-2">
    <label>Coberturas</label>
    <select class="form-select" name="pizzaToppingsIds" onchange="calculateOrderPrice(this, 'pizzaToppingsIds', '#modalEdit')" multiple>
      <option value="">Selecione</option>
      {{#each pizzaToppings}}
        <option value="{{id}}" data-price="{{price}}">{{topping}}</option>
      {{/each}}
    </select>
  </div>
  <div class="col-6 form-group mb-2">
    <label>Tamanho</label>
    <select class="form-select" name="size" onchange="calculateSizePrice(this, '#modalEdit')" required>
      {{#each pizzaSizes}}
        <option value="{{id}}" data-price="{{price}}">{{size}}</option>
      {{/each}}
    </select>
  </div>
  <div class="col-6 form-group mb-2">
    <label>Preço</label>
    <input type="text" class="form-control" name="price" value="0,00" required disabled>
  </div>
{{/simple-modal}}

{{#> simple-modal id="modalEditStatus" title="Editar Status do Pedido"}}
  <div style="display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1rem;">
    {{#each orderStatus}}
      <div class="btn btn-group-vertical btn-light p-3 order-status-btn" data-status="{{status}}" onclick="updateOrderStatus(this, {{status}})">
        <h1 class="bi bi-list-ol mx-auto"></h1>
        <span class="small fw-semibold lh-1">{{label}}</span>
      </div>
    {{/each}}
  </div>
{{/simple-modal}}

{{#> simple-modal id="modalOrderPizzas" title="Ver Pedido de <span></span>" lg=true}}
  <div id="order-pizza-list" style="display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;">
  </div>
{{/simple-modal}}

<script>
  const OrderTable = new DataTable('#client-order-table', {
    paging: true,
    autoWidth: true,
    searching: true,
    pageLength: 25,
    language,
    columns: [
      { data: '#', width: '7%', className: 'text-center' },
      { data: 'status', width: '15%', className: 'text-center' },
      { data: 'price', width: '10%', className: 'text-center' },
      { data: 'ammount', width: '10%', className: 'text-center' },
      { data: 'order', width: '10%', className: 'text-center' },
      { data: 'updated_at', width: '10%', className: 'text-center' },
      { data: 'actions', width: '8%', orderable: false, className: 'text-center' },
    ],
    ajax: {
      url: '{{defaultPath}}/api/orders/{{clientId}}',
      dataSrc: '',
    },
  });

  const modalAdd = new bootstrap.Modal('#modalAdd');
  const modalEdit = new bootstrap.Modal('#modalEdit');
  const modalEditStatus = new bootstrap.Modal('#modalEditStatus');
  const modalOrderPizzas = new bootstrap.Modal('#modalOrderPizzas');

  let pizzaOrders = [];

  function setAmmount(selector, operation) {
    const ammount = getEl(`${selector} [name="ammount"]`);
    if(operation == '+1') ammount.value++;
    if(operation == '-1') ammount.value--;
    if(ammount.value < 1 || !(Number(ammount.value) > 0)) ammount.value = 1;

    const priceInput = getEl(`${selector} [name="price"]`);

    const totalPrice = Object.values(priceInput.dataset).reduce((acc, crr) => acc + Number(crr), 0) * Number(ammount.value);
    priceInput.value = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
    }).format(totalPrice).replace('R$ ', '');
  }

  function calculateOrderPrice(select, type, selector) {
    const { selectedOptions } = select;
    const optionsPrice = Array.from(selectedOptions).map((option) => Number(option.dataset.price ?? 0));
    const price = optionsPrice.reduce((acc, crr) => acc + crr, 0);
    const priceInput = document.querySelector(`${selector} [name="price"]`);

    priceInput.dataset[type] = price;
    const totalPrice = Object.values(priceInput.dataset).reduce((acc, crr) => acc + Number(crr), 0) * Number(getEl(`${selector} [name="ammount"]`).value);
    priceInput.value = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
    }).format(totalPrice).replace('R$ ', '');
  }

  function calculateSizePrice(select, selector) {
    const { selectedOptions } = select;
    const { price } = selectedOptions[0].dataset;
    const priceInput = document.querySelector(`${selector} [name="price"]`);

    priceInput.dataset.size = price;
    const totalPrice = Object.values(priceInput.dataset).reduce((acc, crr) => acc + Number(crr), 0) * Number(getEl(`${selector} [name="ammount"]`).value);
    priceInput.value = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
    }).format(totalPrice).replace('R$ ', '');
  }

  function createPizzaOrder(button) {

    const requestCreatePizzaOrder = new ApiRequest(null, null, '#modalAdd');

    if(!requestCreatePizzaOrder.validate()) return;

    pizzaOrders.push({
      size: Number(requestCreatePizzaOrder.getField('size').value),
      price: Object.values(requestCreatePizzaOrder.getField('price').dataset).reduce((acc, crr) => acc + Number(crr), 0) * Number(getEl(`#modalAdd [name="ammount"]`).value),
      ammount: Number(requestCreatePizzaOrder.getField('ammount').value),
      pizzaFlavorsIds: Array.from(requestCreatePizzaOrder.getField('pizzaFlavorsIds').selectedOptions).map((option) => option.value).filter((id) => id),
      pizzaToppingsIds: Array.from(requestCreatePizzaOrder.getField('pizzaToppingsIds').selectedOptions).map((option) => option.value).filter((id) => id),
    });

    requestCreatePizzaOrder.clearFields();

    requestCreatePizzaOrder.setFields({
      size: 0,
      ammount: 1,
      price: '{{getProperty (getArray pizzaSizes 0) "priceLabel"}}',
    });

    loadPizzaOrdersList();
  }

  function loadPizzaOrdersList() {

    const pizzaOrdersList = getEl('#pizza-orders-list');
    pizzaOrdersList.innerHTML = '';

    pizzaOrders.forEach((item, index) => {
      pizzaOrdersList.innerHTML += `<div class="card mb-2">
        <div class="card-body pb-2 p-2 ps-3 row d-flex align-items-center">
          <div class="col-4 text-start fw-bold">${String(index + 1).padStart(2, '0')}</div>
          <div class="col-4 text-center fw-semibold">${item.ammount} pizza${item.ammount > 1 ? 's' : ''} ${getEl('[name="size"] option', true)[item.size].text.toLowerCase()}${item.ammount > 1 ? 's' : ''}</div>
          <div class="col-4 text-end">
            <button class="btn btn-light fw-semibold" onclick="deletePizzaOrder(${index})">Remover</button>
          </div>
        </div>
      </div>`;
    });

    if(pizzaOrders.length) {
      const totalPrice = Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL',
      }).format(pizzaOrders.reduce((acc, crr) => acc + crr.price, 0));
      pizzaOrdersList.insertAdjacentHTML('beforeEnd', `<button class="btn btn-success w-100 mb-2" onclick="createOrder(this)">Finalizar - ${totalPrice}</button>`);
    }
  }

  function deletePizzaOrder(index) {
    pizzaOrders = pizzaOrders.filter((item, i) => i != index);
    loadPizzaOrdersList();
  }

  function createOrder(button) {

    const requestCreateOrder = new ApiRequest('{{defaultPath}}/api/order', 'POST', '#modalAdd');

    if(!pizzaOrders.length) return;

    requestCreateOrder.setButton(button);

    requestCreateOrder.setBody({
      client_id: '{{clientId}}',
      price: pizzaOrders.reduce((acc, crr) => acc + crr.price, 0),
      orderPizzas: pizzaOrders,
    });

    requestCreateOrder.onSuccess((response) => {
      Notification('Pedido adicionado!');
      OrderTable.ajax.reload();
      modalAdd.hide();
      pizzaOrders.length = 0;
      loadPizzaOrdersList();
      requestCreateOrder.clearFields();
      requestCreateOrder.setFields({
        size: 0,
        ammount: 1,
        price: '{{getProperty (getArray pizzaSizes 0) "priceLabel"}}',
      });
    });

    requestCreateOrder.onError((response) => {
      Notification(response.error, 'danger');
    });

    requestCreateOrder.send();
  }

  const requestUpdateOrder = new ApiRequest(null, 'PUT', '#modalEdit');

  function editOrder(id) {

    const requestDataOrder = new ApiRequest(`{{defaultPath}}/api/order/${id}`, 'GET', '#modalEdit');

    requestDataOrder.onSuccess((response) => {

      Array.from(requestDataOrder.getField('pizzaFlavorsIds')).forEach((option) => {
        option.selected = response.orderPizzaFlavor.filter((item) => item.flavor_id == option.value).length;
      });

      Array.from(requestDataOrder.getField('pizzaToppingsIds')).forEach((option) => {
        option.selected = response.orderPizzaTopping.filter((item) => item.topping_id == option.value).length;
      });

      requestDataOrder.setFields({
        size: response.size,
        price: new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL',
        }).format(response.price).replace('R$ ', ''),
      });

      requestDataOrder.getField('price').dataset.size = requestDataOrder.getField('size').selectedOptions[0].dataset.price;
      requestDataOrder.getField('price').dataset.pizzaFlavorsIds = response.orderPizzaFlavor.map((item) => item.flavor.price).reduce((acc, crr) => acc + crr, 0);
      requestDataOrder.getField('price').dataset.pizzaToppingsIds = response.orderPizzaTopping.map((item) => item.topping.price).reduce((acc, crr) => acc + crr, 0);

      requestUpdateOrder.setUrl(`{{defaultPath}}/api/order/${id}`);
      
      modalEdit.show();
    });

    requestDataOrder.onError((response) => {
      Notification(response.error, 'danger');
    });

    requestDataOrder.send();
  }

  function updateOrder(button) {

    if(!requestUpdateOrder.validate()) return;

    requestUpdateOrder.setButton(button);

    requestUpdateOrder.setBody({
      size: Number(requestUpdateOrder.getField('size').value),
      price: Object.values(requestUpdateOrder.getField('price').dataset).reduce((acc, crr) => acc + Number(crr), 0),
      pizzaFlavorsIds: Array.from(requestUpdateOrder.getField('pizzaFlavorsIds').selectedOptions).map((option) => option.value).filter((id) => id),
      pizzaToppingsIds: Array.from(requestUpdateOrder.getField('pizzaToppingsIds').selectedOptions).map((option) => option.value).filter((id) => id),
    });

    requestUpdateOrder.onSuccess((response) => {
      Notification('Pedido alterado!');
      OrderTable.ajax.reload();
      modalEdit.hide();
    });

    requestUpdateOrder.onError((response) => {
      Notification(response.error, 'danger');
    });

    requestUpdateOrder.send();
  }

  function deleteOrder(id) {
    CustomAlert(() => {
      const requestDeleteOrder = new ApiRequest(`{{defaultPath}}/api/order/${id}`, 'DELETE');

      requestDeleteOrder.onSuccess((response) => {
        OrderTable.ajax.reload();
      });

      requestDeleteOrder.onError((response) => {
        Notification(response.error, 'danger');
      });

      requestDeleteOrder.send();
    });
  }

  const requestUpdateOrderStatus = new ApiRequest(null, 'PATCH', '#modalEditStatus');

  function editOrderStatus(id, status) {

    Array.from(document.querySelectorAll('#modalEditStatus .order-status-btn')).forEach((item) => item.classList.toggle('active', item.dataset.status == status));

    requestUpdateOrderStatus.setUrl(`{{defaultPath}}/api/order/${id}`);

    modalEditStatus.show();
  }

  function updateOrderStatus(button, status) {

    requestUpdateOrderStatus.setButton(button);

    requestUpdateOrderStatus.setBody({ status });

    requestUpdateOrderStatus.onSuccess((response) => {
      Notification('Status alterado!');
      OrderTable.ajax.reload();
      modalEditStatus.hide();
    });

    requestUpdateOrderStatus.onError((response) => {
      Notification(response.error, 'danger');
    });

    requestUpdateOrderStatus.send();
  }

  function getOrderPizzas(id) {

    const requestDataOrderPizzas = new ApiRequest(`{{defaultPath}}/api/order-pizzas/${id}`, 'GET', '');

    requestDataOrderPizzas.onSuccess((response) => {
      const ordersPizzaList = getEl('#order-pizza-list');
      ordersPizzaList.innerHTML = '';

      response.forEach((item, index) => {
        ordersPizzaList.innerHTML += `<div class="card mb-2 order-pizza-card">
          <div class="card-header">
            <div class="row">
              <div class="col-8 text-start fw-semibold text-dark">${item.ammount} pizza${item.ammount > 1 ? 's' : ''} ${item.size.size}</div>
              <div class="col-4 text-end fw-bold text-success">${item.price}</div>
            </div>
          </div>
          <div class="card-body pt-3">
            <div class="row">
              <div class="col-6">
                <label class="fw-semibold">Sabores</label>
                <ul>
                  ${item.orderPizzaFlavor.length
                    ? item.orderPizzaFlavor.map((flavor) => `<li>${flavor.flavor.flavor}</li>`).join('')
                    : 'Nenhum'
                  }
                </ul>
              </div>
              <div class="col-6">
                <label class="fw-semibold">Coberturas</label>
                <ul>
                  ${item.orderPizzaTopping.length
                    ? item.orderPizzaTopping.map((topping) => `<li>${topping.topping.topping}</li>`).join('')
                    : 'Nenhuma'
                  }
                </ul>
              </div>
            </div>
            <div class="row">
              {{#each orderStatus as |item index|}}
                <div class="btn d-flex justify-content-center align-items-center order-status-btn ${(item.status + 1) != {{index}} ? 'd-none' : ''}
                  {{#if (isEqual status 0)}}btn-secondary{{/if}}
                  {{#if (isEqual status 1)}}btn-warning{{/if}}
                  {{#if (isEqual status 2)}}btn-danger{{/if}}
                  {{#if (isEqual status 3)}}btn-success{{/if}}"
                  data-status="{{status}}"
                  onclick="updateOrderPizzaStatus(this, {{status}}, '${item.id}', '${item.order_id}')">
                  <i class="bi bi-list-ol me-1 m-0"></i>
                  <span class="fw-medium">{{label}}</span>
                </div>
              {{/each}}
            </div>
          </div>
        </div>`;
      });

      getEl('#modalOrderPizzas .modal-title span').innerHTML = response?.at(0)?.order?.client?.name ?? '';

      modalOrderPizzas.show();
    });

    requestDataOrderPizzas.onError((response) => {
      Notification(response.error, 'danger');
    });

    requestDataOrderPizzas.send();
  }

  function updateOrderPizzaStatus(button, status, id, order_id) {

    const requestUpdateOrderPizzasStatus = new ApiRequest(`{{defaultPath}}/api/order-pizzas/${id}`, 'PATCH', '#modalOrderPizzas');

    requestUpdateOrderPizzasStatus.setButton(button);

    requestUpdateOrderPizzasStatus.setBody({ status, id });

    requestUpdateOrderPizzasStatus.onSuccess((response) => {
      Notification('Status alterado!');
      {{!-- OrderTable.ajax.reload(); --}}
      {{!-- modalOrderPizzas.hide(); --}}
      getOrderPizzas(order_id);
    });

    requestUpdateOrderPizzasStatus.onError((response) => {
      Notification(response.error, 'danger');
    });

    requestUpdateOrderPizzasStatus.send();
  }

</script>